<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>正则表达式</title>
    <url>/2020/01/18/c++new%20feature%EF%BC%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>正则表达式在<code>c++11</code>后被正式纳入标准库，包含<code>regex_match</code>，<code>regex_search</code>，<code>regex_replace</code>功能模块，通过正则表达式可以轻易完成对特定模式序列化序列的操作。<br>使用正则表达式之前，需要我们有正则表达式语法基础，这里正好有张机票给需要的小伙伴<a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式</a>。</p>
<h4 id="正则表达式与通配符（如windows平台文件搜索框）区别"><a href="#正则表达式与通配符（如windows平台文件搜索框）区别" class="headerlink" title="正则表达式与通配符（如windows平台文件搜索框）区别"></a>正则表达式与通配符（如<code>windows</code>平台文件搜索框）区别</h4><p><code>通配符</code>主要用来操作文件名  。<br><code>正则表达式</code>主要操作文本数据。</p>
<h4 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h4><p>为方便起见，本文的例子统一使用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">poem</span><span class="params">(<span class="string">"if you weeped for the missing sunset you would miss\</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">	all the shining stars. someday,you will find the one，who will wa\</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">	tch every sunrise with you until the sunset of your life"</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>作为匹配源。如果我们想查找在<code>poem</code>中是否有以<code>sun</code>开头的单词，我们首先需要定义正则表达式<code>std::regex rgx(&quot;sun[^ ]*&quot;)</code>或者<code>std::regex seg_rgx(&quot;(sun)([^ ]*)&quot;)</code>。这两种定义方法有一点区别，我们称第二种写法为分组写法，将待匹配部分分隔成<code>sun</code>与<code>……</code>两个部分，如果我们需要对两个部分精确操作的时候，尤其是在使用<code>regex_replace</code>功能时，可能需要将正则表达式书写成分组模式，还有一点就是<code>std::cmatch</code>与<code>std::smatch</code>分别是两个<code>typedef</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> match_results&lt;<span class="keyword">const</span> <span class="keyword">char</span>*&gt; cmatch;</span><br><span class="line"><span class="keyword">typedef</span> match_results&lt;<span class="built_in">string</span>::const_iterator&gt; smatch;</span><br></pre></td></tr></table></figure>
<h4 id="regex-search"><a href="#regex-search" class="headerlink" title="regex_search"></a>regex_search</h4><p><code>regex_search</code>作用是查找特定规则的表达式是否在一段文字中，函数定义可以参见文末参考，我不再贴了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">std</span>::regex_search(poem, rgx)) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"regex_search : find a word start with sun int the poem"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">std</span>::regex_search(poem.begin(),poem.end(), rgx)) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"regex_search : find a word start with sun int the poem"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了上述两种最基本的使用方法之外，还可以通过正则表达式配合带有<code>std::cmatch</code>与<code>std::smatch</code>参数的重载版本，获取匹配细节。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> temp_poem = poem;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"reg search ……"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">std</span>::regex_search(temp_poem, sm, rgx)) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> ref : sm) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; ref &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	temp_poem = sm.suffix().str();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp_poem = poem;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"seg_reg search ……"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">std</span>::regex_search(temp_poem, sm, seg_rgx)) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> ref : sm) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"    "</span> &lt;&lt; ref &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	temp_poem = sm.suffix().str();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用了分组匹配模式的部分，将匹配细节存入迭代器<code>std::smatch</code>中，由于其定义为<code>match_results&lt;string::const_iterator&gt;</code>，使用<code>sm.suffix().str()</code>取出匹配之后的语句，重复直到最后一个匹配，结果输出正则表达式匹配结果与正则表达式各个组匹配的子部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">reg search ……</span><br><span class="line">    sunset</span><br><span class="line">    sunrise</span><br><span class="line">    sunset</span><br><span class="line">seg_reg search ……</span><br><span class="line">    sunset</span><br><span class="line">    sun</span><br><span class="line">    <span class="built_in">set</span></span><br><span class="line">    sunrise</span><br><span class="line">    sun</span><br><span class="line">    rise</span><br><span class="line">    sunset</span><br><span class="line">    sun</span><br><span class="line">    <span class="built_in">set</span></span><br></pre></td></tr></table></figure>
<p>可以看出，虽然同样匹配了三个单词，使用分组模式的正则表达式进行匹配，我们额外的得到了正则表达式每一组匹配的结果。</p>
<h4 id="regex-match"><a href="#regex-match" class="headerlink" title="regex_match"></a>regex_match</h4><p><code>regex_match</code>函数的使用基本与<code>regex_search</code>相同，为了更好的区分函数功能，需要另外定义了两个正则表达式<code>std::regex not_rgx(&quot;(?!.*shining)(.*)&quot;)</code>，<code>std::regex yes_rgx(&quot;(.*)(sunset)(.*)(sunrise)(.*)&quot;)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">std</span>::regex_match(poem.begin(),poem.end(), not_rgx)) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"regex_match : find a word shining int the poem"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">std</span>::regex_match(poem, yes_rgx)) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"regex_match : find a ……sunset……sunrise…… format int the poem"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">std</span>::regex_match(poem.begin(), poem.end(), yes_rgx)) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"regex_match : find a ……sunset……sunrise…… format int the poem"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::regex_match(poem, sm, yes_rgx);</span><br><span class="line"><span class="built_in">std</span>::regex_match(poem.c_str(), cm, yes_rgx);</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"cm.size() == sm.size() ? (0 | 1) : "</span> &lt;&lt; (cm.size() == sm.size()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>函数的输出如下，需要注意的是，当使用<code>std::cmatch</code>时，匹配源需要是c风格的<code>const char T*</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">regex_match : find a word shining <span class="keyword">int</span> the poem</span><br><span class="line">regex_match : find a ……sunset……sunrise…… format <span class="keyword">int</span> the poem</span><br><span class="line">regex_match : find a ……sunset……sunrise…… format <span class="keyword">int</span> the poem</span><br><span class="line">cm.size() == sm.size() ? (<span class="number">0</span> | <span class="number">1</span>) : <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="regex-replace"><a href="#regex-replace" class="headerlink" title="regex_replace"></a>regex_replace</h4><p>很多人在查阅文档的时候，会对<code>regex_replace</code>这个函数非常困惑，我在第一次查阅参数说明的时候也很疑惑，<br><code>$1</code>,<code>$2</code>…<code>$n</code>到底是干什么用的，这就要说到开头所说的正则表达式的分组模式了，当我们在匹配<code>target</code><br>中写出<code>$*</code>的时候，我们写出的这个正则表达式匹配的组就不进行替换，极端点看，比如我们正则表达式只有两个组，<br>我们在替换的目标字符串里面写了<code>$1 $2</code>，此时替换是没有效果的，好比你用源字符串替换了源字符串，这样的设计<br>在我们需要对匹配模式分组中每个组进行操作的时候或者匹配某个部分存在困难，可以先匹配一组内容，再在正则表<br>达式中进行精细划分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::regex_replace(poem, rgx, <span class="string">""</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::regex_replace(poem, seg_rgx, <span class="string">""</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> replace_poem;</span><br><span class="line"><span class="built_in">std</span>::regex_replace(<span class="built_in">std</span>::back_inserter(replace_poem), poem.begin(), poem.end(), rgx, <span class="string">""</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"std::back_inserter mode : "</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; replace_poem &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::regex_replace(poem, seg_rgx, <span class="string">"$1down"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::regex_replace(poem, seg_rgx, <span class="string">"rain$2"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::regex_replace(poem, seg_rgx, <span class="string">"raindown"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::regex_replace(poem, seg_rgx, <span class="string">"[$1 - $2]"</span>, <span class="built_in">std</span>::regex_constants::format_no_copy) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p>上面的代码中，<code>reg</code>与<code>seg_reg</code>同时找到了<code>sunset</code>-<code>sunrise</code>-<code>sunset</code>三个匹配。而分组模式在这三个匹配里面又分别匹配了<br>分组 | $1 | $2<br>:-: | :-: | :-:<br>sunset | sun | set<br>sunrise | sun| rise<br>sunset | sun| set<br>所以当我们分别将目标模式写为<code>$1down</code> <code>rain$2</code> <code>raindown</code> <code>[$1 - $2]</code>作用分别为</p>
<ol>
<li>将三个匹配的<code>sun</code>保留，将<code>set</code> <code>rise</code> <code>set</code>同时替换为<code>down</code>;</li>
<li>将三个匹配的<code>set</code> <code>rise</code> <code>set</code>保留，将<code>sun</code>同时替换为<code>rain</code>;</li>
<li>将<code>sunset</code> <code>sunrise</code> <code>sunset</code>同时替换为<code>raindown</code>;</li>
<li>在<code>sun</code>与{<code>set</code> <code>rise</code> <code>set</code>}中间添加连接号，并将匹配文字用中括号括起来。<br>可以预想到输出为<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> you weeped <span class="keyword">for</span> the missing  you would miss all the shining stars. someday,you will find the one，who will watch every  with you until the  of your life</span><br><span class="line"><span class="keyword">if</span> you weeped <span class="keyword">for</span> the missing  you would miss all the shining stars. someday,you will find the one，who will watch every  with you until the  of your life</span><br><span class="line"><span class="built_in">std</span>::back_inserter mode :</span><br><span class="line"><span class="keyword">if</span> you weeped <span class="keyword">for</span> the missing  you would miss all the shining stars. someday,you will find the one，who will watch every  with you until the  of your life</span><br><span class="line"><span class="keyword">if</span> you weeped <span class="keyword">for</span> the missing sundown you would miss all the shining stars. someday,you will find the one，who will watch every sundown with you until the sundown of your life</span><br><span class="line"><span class="keyword">if</span> you weeped <span class="keyword">for</span> the missing rainset you would miss all the shining stars. someday,you will find the one，who will watch every rainrise with you until the rainset of your life</span><br><span class="line"><span class="keyword">if</span> you weeped <span class="keyword">for</span> the missing raindown you would miss all the shining stars. someday,you will find the one，who will watch every raindown with you until the raindown of your life</span><br><span class="line">[sun - <span class="built_in">set</span>][sun - rise][sun - <span class="built_in">set</span>]</span><br></pre></td></tr></table></figure>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4>完整代码见<a href="https://github.com/degawang/feature" target="_blank" rel="noopener">c++正则表达式</a><h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><a href="http://www.cplusplus.com/reference/regex/" target="_blank" rel="noopener">cplusplus</a><br><a href="https://zh.cppreference.com/w/cpp/regex" target="_blank" rel="noopener">cpprefeance</a><br><a href="https://deerchao.cn/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式</a></li>
</ol>
]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>python note</title>
    <url>/2020/01/18/python%20function/</url>
    <content><![CDATA[<p>默认参数必须指向不变对象！<br>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>All about my history</title>
    <url>/2020/01/18/home/</url>
    <content><![CDATA[<h2 id="应无所住，而生其心"><a href="#应无所住，而生其心" class="headerlink" title="应无所住，而生其心"></a>应无所住，而生其心</h2><h2 id="从前种种，譬如昨日死；从后种种，譬如今日生"><a href="#从前种种，譬如昨日死；从后种种，譬如今日生" class="headerlink" title="从前种种，譬如昨日死；从后种种，譬如今日生"></a>从前种种，譬如昨日死；从后种种，譬如今日生</h2><h2 id="故人当以事后之悔悟，破临事之痴迷，则性定而动无不正"><a href="#故人当以事后之悔悟，破临事之痴迷，则性定而动无不正" class="headerlink" title="故人当以事后之悔悟，破临事之痴迷，则性定而动无不正"></a>故人当以事后之悔悟，破临事之痴迷，则性定而动无不正</h2>]]></content>
      <categories>
        <category>home</category>
      </categories>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>python 虚拟环境</title>
    <url>/2020/01/18/virtualenv/</url>
    <content><![CDATA[<h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br><span class="line">sudo pip install virtualenvwrapper(-win)</span><br></pre></td></tr></table></figure>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、在~（家目录）下创建目录用来存放虚拟环境</span></span><br><span class="line">mkdir .virtualenvs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、打开~/.bashrc文件，并添加如下：</span></span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、运行</span></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<h3 id="创建虚拟环境-1"><a href="#创建虚拟环境-1" class="headerlink" title="创建虚拟环境-1"></a>创建虚拟环境-1</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkvirtualenv -p python ***</span><br></pre></td></tr></table></figure>
<h3 id="创建虚拟环境-2"><a href="#创建虚拟环境-2" class="headerlink" title="创建虚拟环境-2"></a>创建虚拟环境-2</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需手动激活虚拟环境文件夹中的activate文件</span></span><br><span class="line">virtualenv -p python ***</span><br></pre></td></tr></table></figure>
<h3 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 显示虚拟环境列表</span></span><br><span class="line">workon | lsvirtualenv</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 ** 虚拟环境</span></span><br><span class="line">workon **</span><br></pre></td></tr></table></figure>
<h3 id="进入到虚拟环境"><a href="#进入到虚拟环境" class="headerlink" title="进入到虚拟环境"></a>进入到虚拟环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cdvirtualenv ***</span><br></pre></td></tr></table></figure>
<h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<h3 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmvirtualenv **</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
